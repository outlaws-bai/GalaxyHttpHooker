# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import Counter_pb2 as Counter__pb2


class CounterServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.counterRequestToBeSent = channel.unary_unary(
                '/org.m2sec.rpc.CounterService/counterRequestToBeSent',
                request_serializer=Counter__pb2.Request.SerializeToString,
                response_deserializer=Counter__pb2.Request.FromString,
                )
        self.counterResponseReceived = channel.unary_unary(
                '/org.m2sec.rpc.CounterService/counterResponseReceived',
                request_serializer=Counter__pb2.Response.SerializeToString,
                response_deserializer=Counter__pb2.Response.FromString,
                )
        self.counterProxyRequestReceived = channel.unary_unary(
                '/org.m2sec.rpc.CounterService/counterProxyRequestReceived',
                request_serializer=Counter__pb2.Request.SerializeToString,
                response_deserializer=Counter__pb2.Request.FromString,
                )
        self.counterProxyRequestToBeSent = channel.unary_unary(
                '/org.m2sec.rpc.CounterService/counterProxyRequestToBeSent',
                request_serializer=Counter__pb2.Request.SerializeToString,
                response_deserializer=Counter__pb2.Request.FromString,
                )
        self.counterProxyResponseReceived = channel.unary_unary(
                '/org.m2sec.rpc.CounterService/counterProxyResponseReceived',
                request_serializer=Counter__pb2.Response.SerializeToString,
                response_deserializer=Counter__pb2.Response.FromString,
                )
        self.counterProxyResponseToBeSent = channel.unary_unary(
                '/org.m2sec.rpc.CounterService/counterProxyResponseToBeSent',
                request_serializer=Counter__pb2.Response.SerializeToString,
                response_deserializer=Counter__pb2.Response.FromString,
                )


class CounterServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def counterRequestToBeSent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def counterResponseReceived(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def counterProxyRequestReceived(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def counterProxyRequestToBeSent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def counterProxyResponseReceived(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def counterProxyResponseToBeSent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_CounterServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'counterRequestToBeSent': grpc.unary_unary_rpc_method_handler(
                    servicer.counterRequestToBeSent,
                    request_deserializer=Counter__pb2.Request.FromString,
                    response_serializer=Counter__pb2.Request.SerializeToString,
            ),
            'counterResponseReceived': grpc.unary_unary_rpc_method_handler(
                    servicer.counterResponseReceived,
                    request_deserializer=Counter__pb2.Response.FromString,
                    response_serializer=Counter__pb2.Response.SerializeToString,
            ),
            'counterProxyRequestReceived': grpc.unary_unary_rpc_method_handler(
                    servicer.counterProxyRequestReceived,
                    request_deserializer=Counter__pb2.Request.FromString,
                    response_serializer=Counter__pb2.Request.SerializeToString,
            ),
            'counterProxyRequestToBeSent': grpc.unary_unary_rpc_method_handler(
                    servicer.counterProxyRequestToBeSent,
                    request_deserializer=Counter__pb2.Request.FromString,
                    response_serializer=Counter__pb2.Request.SerializeToString,
            ),
            'counterProxyResponseReceived': grpc.unary_unary_rpc_method_handler(
                    servicer.counterProxyResponseReceived,
                    request_deserializer=Counter__pb2.Response.FromString,
                    response_serializer=Counter__pb2.Response.SerializeToString,
            ),
            'counterProxyResponseToBeSent': grpc.unary_unary_rpc_method_handler(
                    servicer.counterProxyResponseToBeSent,
                    request_deserializer=Counter__pb2.Response.FromString,
                    response_serializer=Counter__pb2.Response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'org.m2sec.rpc.CounterService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class CounterService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def counterRequestToBeSent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.m2sec.rpc.CounterService/counterRequestToBeSent',
            Counter__pb2.Request.SerializeToString,
            Counter__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def counterResponseReceived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.m2sec.rpc.CounterService/counterResponseReceived',
            Counter__pb2.Response.SerializeToString,
            Counter__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def counterProxyRequestReceived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.m2sec.rpc.CounterService/counterProxyRequestReceived',
            Counter__pb2.Request.SerializeToString,
            Counter__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def counterProxyRequestToBeSent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.m2sec.rpc.CounterService/counterProxyRequestToBeSent',
            Counter__pb2.Request.SerializeToString,
            Counter__pb2.Request.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def counterProxyResponseReceived(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.m2sec.rpc.CounterService/counterProxyResponseReceived',
            Counter__pb2.Response.SerializeToString,
            Counter__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def counterProxyResponseToBeSent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/org.m2sec.rpc.CounterService/counterProxyResponseToBeSent',
            Counter__pb2.Response.SerializeToString,
            Counter__pb2.Response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
